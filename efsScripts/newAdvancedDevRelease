#!/bin/bash
repo=https://MthreeDelegate:AlumniTrain%40M3%2FT1@bitbucket.org/mthree_consulting/javademos.git
function versionIncrement {
        split=`tr "_" " " <<< $1` #turns the underscore into a space so awk can read it
        newVersion=$((`awk '{print $2}' <<< $split`+1)) #grabs the version number and adds 1
}

function getCurrent { #function that returns the name of the latest version - meta,project and name are parameters
	currentVersion=`ls -lv $thePath | grep $name | grep -v 'DEV\|UAT\|PROD' | awk '{print $9}' | tail -1`
}


meta=$2 #puts real words on the parameters so its a bit more readable
project=$3

split=`tr "_" " " <<< $1`
name=`awk '{print $1}' <<< $split` #splits the project name and desired function to separate variables
task=`awk '{print $2}' <<< $split`

if  [ -z "$1" ]; then # Ensures all the parameters are present so the program can function
        echo "You need to enter the username_function, meta and project names"
        exit 1 # notifies user if they have missed something and exits with an error code
elif [ -z "$3" ]; then
        echo "You need to enter the meta or project name"
        exit 1
elif [ $task != "newDevReleaseAdvanced" ]; then
	echo "You need to enter the project name followed by _newDevReleaseAdvanced"
	exit 1
fi

thePath=/efs/dev/"$meta"/"$project"/ #creates the path of the efs project
getCurrent #finds out what the current version is
versionIncrement $currentVersion #using previous result determines next version

efs create release $meta $project "$name"_"$newVersion" #creates new dev folder with the new version number
git clone $repo "$thePath"/"$name"_"$newVersion"/src/ #clones the code from the repo on internet

efs create install $meta $project "$name"_"$newVersion" common #creates a common install location in /dev/
cp -r "$thePath"/"$name"_"$newVersion"/src/* "$thePath"/"$name"_"$newVersion"/install/common #copies the code into the common
efs create releaselink $meta $project "$name"_"$newVersion" "$name"_DEV #creates releaselink for installing on dev test environments

echo "Program Completed successfully. New dev release $newVersion of $name available in $thePath"
exit 0 #program ended successfully, so has no error code
